from google.colab import files
uploaded = files.upload()
import pandas as pd

df = pd.read_csv("E Commerce Dataset.csv", skiprows=3)  # Adjust skiprows if needed
df.columns = df.columns.str.strip()
df.head()
df.info()
df.describe()
df.shape
df.columns
df.isnull().sum()
df.duplicated().sum()
import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='Churn', data=df)
plt.title('Churn Distribution')
plt.show()

sns.boxplot(x='Churn', y='Tenure', data=df)
plt.title('Tenure vs Churn')
plt.show()
target = 'Churn'
features = [col for col in df.columns if col != target]
X = df[features]
y = df[target]
cat_cols = X.select_dtypes(include='object').columns
X[cat_cols] = X[cat_cols].apply(lambda col: col.str.strip())
X[cat_cols] = X[cat_cols].apply(lambda col: col.astype('category').cat.codes)
X = pd.get_dummies(X, drop_first=True)
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train, y_train)
from sklearn.metrics import classification_report, confusion_matrix

y_pred = model.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
sample = X.iloc[0]  # replace with custom input
sample_scaled = scaler.transform([sample])
model.predict(sample_scaled)
def preprocess_input(input_dict):
    input_df = pd.DataFrame([input_dict])
    input_df = pd.get_dummies(input_df)
    input_df = input_df.reindex(columns=X.columns, fill_value=0)
    return scaler.transform(input_df)
def predict_churn(input_dict):
    processed = preprocess_input(input_dict)
    prediction = model.predict(processed)
    return "Churn" if prediction[0] == 1 else "Not Churn"
!pip install gradio
import gradio as gr
def churn_app(gender, age, tenure, location):
    input_dict = {
        'Gender': gender,
        'Age': age,
        'Tenure': tenure,
        'Location': location
    }
    return predict_churn(input_dict)
interface = gr.Interface(
    fn=churn_app,
    inputs=["text", "number", "number", "text"],
    outputs="text",
    title="Customer Churn Predictor"
)

interface.launch()
